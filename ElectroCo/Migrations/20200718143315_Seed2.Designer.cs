// <auto-generated />
using System;
using ElectroCo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElectroCo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200718143315_Seed2")]
    partial class Seed2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElectroCo.Models.Clientes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)")
                        .HasMaxLength(9);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CodigoPostal = "2000-070 Almeirim",
                            Email = "cliente@ipt.pt",
                            Morada = "Rua São João da Ribeira, nº59",
                            NIF = "123456789",
                            Nome = "Cliente Cliente",
                            Telefone = "987456123",
                            UserId = "91b48022-fcca-4aed-8bee-63f2ff93a8c5"
                        });
                });

            modelBuilder.Entity("ElectroCo.Models.DetalhesEncomenda", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EncomendaID")
                        .HasColumnType("int");

                    b.Property<float>("PrecoProduto")
                        .HasColumnType("real");

                    b.Property<int>("ProdutoID")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EncomendaID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("DetalhesEncomendas");
                });

            modelBuilder.Entity("ElectroCo.Models.Encomendas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEncomenda")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstadoEncomenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GestorID")
                        .HasColumnType("int");

                    b.Property<string>("MoradaEncomenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoradaFaturacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrevisaoEntrega")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("GestorID");

                    b.ToTable("Encomendas");
                });

            modelBuilder.Entity("ElectroCo.Models.Funcionarios", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<int>("NumFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)")
                        .HasMaxLength(9);

                    b.Property<string>("TipoFuncionario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Funcionarios");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "gerente@ipt.pt",
                            Nome = "Gerente Gerente",
                            NumFuncionario = 666,
                            Telefone = "987456123",
                            TipoFuncionario = "administrador",
                            UserId = "f554eee4-e19d-4830-a02c-aabe9f18e8a7"
                        },
                        new
                        {
                            ID = 2,
                            Email = "gestor@ipt.pt",
                            Nome = "Gestor Gestor",
                            NumFuncionario = 777,
                            Telefone = "987456123",
                            TipoFuncionario = "gestorArmazem",
                            UserId = "96fc6f49-a2b8-42eb-a63d-edc9e8a7c816"
                        });
                });

            modelBuilder.Entity("ElectroCo.Models.Produtos", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstadoProduto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Preco")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EstadoProduto = "Disponível",
                            Imagem = "1.png",
                            Nome = "Msi b550 motherboard",
                            Preco = 210f,
                            Stock = 4,
                            Tipo = "Motherboard"
                        },
                        new
                        {
                            ID = 2,
                            EstadoProduto = "Disponível",
                            Imagem = "2.png",
                            Nome = "Asus zenphone",
                            Preco = 320f,
                            Stock = 10,
                            Tipo = "Smartphones"
                        },
                        new
                        {
                            ID = 3,
                            EstadoProduto = "Disponível",
                            Imagem = "3.png",
                            Nome = "AMD Ryzen 3600",
                            Preco = 186f,
                            Stock = 3,
                            Tipo = "Processadores"
                        },
                        new
                        {
                            ID = 4,
                            EstadoProduto = "Indisponível",
                            Imagem = "4.png",
                            Nome = "PSU Seasonic 650W Platinum",
                            Preco = 112f,
                            Stock = 0,
                            Tipo = "Fonte de Alimentação"
                        },
                        new
                        {
                            ID = 5,
                            EstadoProduto = "Disponível",
                            Imagem = "5.png",
                            Nome = "GSKILL 16GB 3600MHZ Cl18",
                            Preco = 75f,
                            Stock = 21,
                            Tipo = "Memórias RAM"
                        },
                        new
                        {
                            ID = 6,
                            EstadoProduto = "Disponível",
                            Imagem = "6.png",
                            Nome = "SSD Samsung 750 500GB",
                            Preco = 52f,
                            Stock = 56,
                            Tipo = "Armazenamento Interno"
                        },
                        new
                        {
                            ID = 7,
                            EstadoProduto = "Disponível",
                            Imagem = "7.png",
                            Nome = "SSD PNY 500GB",
                            Preco = 48f,
                            Stock = 34,
                            Tipo = "Armazenamento Interno"
                        },
                        new
                        {
                            ID = 8,
                            EstadoProduto = "Disponível",
                            Imagem = "8.png",
                            Nome = "ZOTAC NVIDIA RTX 2070 mini ",
                            Preco = 450f,
                            Stock = 2,
                            Tipo = "Placa Gráfica"
                        },
                        new
                        {
                            ID = 9,
                            EstadoProduto = "Disponível",
                            Imagem = "9.png",
                            Nome = "Corsair Crystal 465X",
                            Preco = 90f,
                            Stock = 2,
                            Tipo = "Caixas de Computador"
                        },
                        new
                        {
                            ID = 10,
                            EstadoProduto = "Disponível",
                            Imagem = "10.png",
                            Nome = "Water Cooler CoolerMaster MasterLiquid ML240L RGB",
                            Preco = 50f,
                            Stock = 12,
                            Tipo = "Coolers CPU"
                        },
                        new
                        {
                            ID = 11,
                            EstadoProduto = "Disponível",
                            Imagem = "11.png",
                            Nome = "Corsair LL120 FAN Pack 3 ",
                            Preco = 80f,
                            Stock = 4,
                            Tipo = "Ventoinhas"
                        },
                        new
                        {
                            ID = 12,
                            EstadoProduto = "Disponível",
                            Imagem = "12.png",
                            Nome = "ASUS B550 TUF motherboard",
                            Preco = 135f,
                            Stock = 1,
                            Tipo = "Motherboard"
                        });
                });

            modelBuilder.Entity("ElectroCo.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoID")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ad",
                            ConcurrencyStamp = "9c672dc1-6478-45bd-b1b6-1139ff5f8d79",
                            Name = "administrador",
                            NormalizedName = "administrador"
                        },
                        new
                        {
                            Id = "ga",
                            ConcurrencyStamp = "7858d579-e075-4526-ada1-7f96ccd2f0d1",
                            Name = "gestorArmazem",
                            NormalizedName = "gestorArmazem"
                        },
                        new
                        {
                            Id = "c",
                            ConcurrencyStamp = "a7ce4ba6-26c7-476a-9f67-75ac529b8b1c",
                            Name = "cliente",
                            NormalizedName = "cliente"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "f554eee4-e19d-4830-a02c-aabe9f18e8a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd1c4aa5-aaed-45ff-a6e9-11e8c6888644",
                            Email = "gerente@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GERENTE@IPT.PT",
                            NormalizedUserName = "GERENTE@IPT.PT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOwjUR76Lx3fR0i9QH3Noni0nzQTLzJ9a2CM1v+IdBwB6ADWtKRgX4o4Sl8FyBIoqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CYQGW2ATI3AOJUO66PHZWTHIPBZRU6NL",
                            TwoFactorEnabled = false,
                            UserName = "gerente@ipt.pt"
                        },
                        new
                        {
                            Id = "96fc6f49-a2b8-42eb-a63d-edc9e8a7c816",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd1c4aa5-aaed-45ff-a6e9-11e8c6888644",
                            Email = "gestor@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GESTOR@IPT.PT",
                            NormalizedUserName = "GESTOR@IPT.PT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOwjUR76Lx3fR0i9QH3Noni0nzQTLzJ9a2CM1v+IdBwB6ADWtKRgX4o4Sl8FyBIoqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CYQGW2ATI3AOJUO66PHZWTHIPBZRU6NL",
                            TwoFactorEnabled = false,
                            UserName = "gestor@ipt.pt"
                        },
                        new
                        {
                            Id = "91b48022-fcca-4aed-8bee-63f2ff93a8c5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd1c4aa5-aaed-45ff-a6e9-11e8c6888644",
                            Email = "cliente@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTE@IPT.PT",
                            NormalizedUserName = "CLIENTE@IPT.PT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOwjUR76Lx3fR0i9QH3Noni0nzQTLzJ9a2CM1v+IdBwB6ADWtKRgX4o4Sl8FyBIoqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CYQGW2ATI3AOJUO66PHZWTHIPBZRU6NL",
                            TwoFactorEnabled = false,
                            UserName = "cliente@ipt.pt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Nome",
                            ClaimValue = "Gerente Gerente",
                            UserId = "f554eee4-e19d-4830-a02c-aabe9f18e8a7"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Nome",
                            ClaimValue = "Gestor Gestor",
                            UserId = "96fc6f49-a2b8-42eb-a63d-edc9e8a7c816"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Nome",
                            ClaimValue = "Cliente Cliente",
                            UserId = "91b48022-fcca-4aed-8bee-63f2ff93a8c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f554eee4-e19d-4830-a02c-aabe9f18e8a7",
                            RoleId = "ad"
                        },
                        new
                        {
                            UserId = "96fc6f49-a2b8-42eb-a63d-edc9e8a7c816",
                            RoleId = "ga"
                        },
                        new
                        {
                            UserId = "91b48022-fcca-4aed-8bee-63f2ff93a8c5",
                            RoleId = "c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ElectroCo.Models.DetalhesEncomenda", b =>
                {
                    b.HasOne("ElectroCo.Models.Encomendas", "Order")
                        .WithMany("Orders")
                        .HasForeignKey("EncomendaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroCo.Models.Produtos", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectroCo.Models.Encomendas", b =>
                {
                    b.HasOne("ElectroCo.Models.Clientes", "Cliente")
                        .WithMany("Orders")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroCo.Models.Funcionarios", "Gestor")
                        .WithMany("Orders")
                        .HasForeignKey("GestorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectroCo.Models.ShoppingCart", b =>
                {
                    b.HasOne("ElectroCo.Models.Clientes", "Cliente")
                        .WithMany("Cart")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectroCo.Models.Produtos", "Product")
                        .WithMany("Cart")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
